#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Sep 20 13:05:52 2010

import wx

# begin wxGlade: extracode
# end wxGlade



class AddinMakerWindow(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AddinMakerWindow.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.tabs_notebook = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_2 = wx.Panel(self.tabs_notebook, -1)
        self.notebook_1_pane_1 = wx.Panel(self.tabs_notebook, -1)
        self.logo_panel = wx.Panel(self, -1)
        self.properties_rows_holder_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Project Properties:")
        self.title_panel = wx.Panel(self, -1)
        self.title_label = wx.StaticText(self.title_panel, -1, "Python AddIn Wizard", style=wx.ALIGN_RIGHT)
        self.static_line_3 = wx.StaticLine(self, -1)
        self.logo_bitmap = wx.StaticBitmap(self.logo_panel, -1, wx.Bitmap("images\\AddInDesktop64.png", wx.BITMAP_TYPE_ANY))
        self.folder_label = wx.StaticText(self.notebook_1_pane_1, -1, "Working Folder:", style=wx.ALIGN_RIGHT)
        self.folder_button = wx.Button(self.notebook_1_pane_1, -1, "Select Folder...")
        self.product_label = wx.StaticText(self.notebook_1_pane_1, -1, "Select Product:", style=wx.ALIGN_RIGHT)
        self.product_combo_box = wx.ComboBox(self.notebook_1_pane_1, -1, choices=["ArcMap", "ArcGlobe", "ArcScene", "ArcCatalog"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.static_line_1 = wx.StaticLine(self.notebook_1_pane_1, -1)
        self.project_name_label = wx.StaticText(self.notebook_1_pane_1, -1, "Name*:", style=wx.ALIGN_RIGHT)
        self.project_name = wx.TextCtrl(self.notebook_1_pane_1, -1, "")
        self.project_version_label = wx.StaticText(self.notebook_1_pane_1, -1, "Version*:", style=wx.ALIGN_RIGHT)
        self.project_version = wx.TextCtrl(self.notebook_1_pane_1, -1, "")
        self.project_company_label = wx.StaticText(self.notebook_1_pane_1, -1, "Company:", style=wx.ALIGN_RIGHT)
        self.project_company = wx.TextCtrl(self.notebook_1_pane_1, -1, "")
        self.project_description_label = wx.StaticText(self.notebook_1_pane_1, -1, "Description:", style=wx.ALIGN_RIGHT)
        self.project_description = wx.TextCtrl(self.notebook_1_pane_1, -1, "")
        self.project_author_label = wx.StaticText(self.notebook_1_pane_1, -1, "Author:", style=wx.ALIGN_RIGHT)
        self.project_author = wx.TextCtrl(self.notebook_1_pane_1, -1, "")
        self.static_line_2 = wx.StaticLine(self.notebook_1_pane_1, -1)
        self.project_image_label = wx.StaticText(self.notebook_1_pane_1, -1, "Image:", style=wx.ALIGN_RIGHT)
        self.select_project_image = wx.Button(self.notebook_1_pane_1, -1, "Select Image...")
        self.icon_bitmap = wx.StaticBitmap(self.notebook_1_pane_1, -1, wx.Bitmap("images\\AddInDesktop48.png", wx.BITMAP_TYPE_ANY), style=wx.SIMPLE_BORDER)
        self.contents_tree = wx.TreeCtrl(self.notebook_1_pane_2, -1, style=wx.TR_HAS_BUTTONS|wx.TR_LINES_AT_ROOT|wx.TR_HIDE_ROOT|wx.TR_DEFAULT_STYLE|wx.RAISED_BORDER)
        self.item_property_panel = wx.Panel(self.notebook_1_pane_2, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.SelectFolder, self.folder_button)
        self.Bind(wx.EVT_COMBOBOX, self.ComboBox, self.product_combo_box)
        self.Bind(wx.EVT_TEXT_ENTER, self.ProjectNameText, self.project_name)
        self.Bind(wx.EVT_TEXT, self.ProjectNameText, self.project_name)
        self.Bind(wx.EVT_TEXT_ENTER, self.ProjectVersionText, self.project_version)
        self.Bind(wx.EVT_TEXT, self.ProjectVersionText, self.project_version)
        self.Bind(wx.EVT_TEXT_ENTER, self.ProjectCompanyText, self.project_company)
        self.Bind(wx.EVT_TEXT, self.ProjectCompanyText, self.project_company)
        self.Bind(wx.EVT_TEXT_ENTER, self.ProjectDescriptionText, self.project_description)
        self.Bind(wx.EVT_TEXT, self.ProjectDescriptionText, self.project_description)
        self.Bind(wx.EVT_TEXT_ENTER, self.ProjectAuthorText, self.project_author)
        self.Bind(wx.EVT_TEXT, self.ProjectAuthorText, self.project_author)
        self.Bind(wx.EVT_BUTTON, self.SelectProjectImage, self.select_project_image)
        self.Bind(wx.EVT_TREE_BEGIN_DRAG, self.BeginDrag, self.contents_tree)
        self.Bind(wx.EVT_TREE_END_DRAG, self.EndDrag, self.contents_tree)
        self.Bind(wx.EVT_TREE_DELETE_ITEM, self.DeleteItem, self.contents_tree)
        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.SelChanged, self.contents_tree)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.ChangeTab, self.tabs_notebook)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AddinMakerWindow.__set_properties
        self.SetTitle("ArcGIS Python AddIn Wizard")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("images\\AddInDesktop32.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((719, 575))
        self.title_label.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.title_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DHIGHLIGHT))
        self.product_combo_box.SetSelection(0)
        self.project_name_label.SetMinSize((72, 16))
        self.project_version_label.SetMinSize((72, 16))
        self.project_company_label.SetMinSize((72, 16))
        self.project_description_label.SetMinSize((72, 16))
        self.project_author_label.SetMinSize((72, 16))
        self.project_image_label.SetMinSize((72, 16))
        self.contents_tree.SetMinSize((200, 484))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AddinMakerWindow.__do_layout
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        content_sizer = wx.BoxSizer(wx.HORIZONTAL)
        splitter_sizer = wx.BoxSizer(wx.HORIZONTAL)
        items_sizer = wx.BoxSizer(wx.HORIZONTAL)
        fields_sizer = wx.BoxSizer(wx.VERTICAL)
        properties_rows_holder = wx.StaticBoxSizer(self.properties_rows_holder_staticbox, wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        properties_rows = wx.BoxSizer(wx.VERTICAL)
        row_sizer6 = wx.BoxSizer(wx.HORIZONTAL)
        row_sizer5 = wx.BoxSizer(wx.HORIZONTAL)
        row_sizer4 = wx.BoxSizer(wx.HORIZONTAL)
        row_sizer3 = wx.BoxSizer(wx.HORIZONTAL)
        row_sizer2 = wx.BoxSizer(wx.HORIZONTAL)
        row_sizer1 = wx.BoxSizer(wx.HORIZONTAL)
        product_sizer = wx.BoxSizer(wx.HORIZONTAL)
        folder_sizer = wx.BoxSizer(wx.HORIZONTAL)
        logo_sizer = wx.BoxSizer(wx.HORIZONTAL)
        title_sizer = wx.BoxSizer(wx.HORIZONTAL)
        title_sizer.Add(self.title_label, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_HORIZONTAL, 8)
        self.title_panel.SetSizer(title_sizer)
        main_sizer.Add(self.title_panel, 0, wx.EXPAND|wx.ALIGN_RIGHT, 0)
        main_sizer.Add(self.static_line_3, 0, wx.EXPAND, 0)
        logo_sizer.Add(self.logo_bitmap, 0, wx.TOP, 8)
        self.logo_panel.SetSizer(logo_sizer)
        splitter_sizer.Add(self.logo_panel, 0, wx.EXPAND, 0)
        folder_sizer.Add(self.folder_label, 0, wx.ALIGN_CENTER_VERTICAL, 8)
        folder_sizer.Add(self.folder_button, 1, wx.EXPAND, 8)
        fields_sizer.Add(folder_sizer, 0, wx.ALL|wx.EXPAND, 4)
        product_sizer.Add(self.product_label, 0, wx.ALIGN_CENTER_VERTICAL, 3)
        product_sizer.Add(self.product_combo_box, 0, 0, 3)
        fields_sizer.Add(product_sizer, 0, wx.ALL|wx.EXPAND, 4)
        fields_sizer.Add(self.static_line_1, 0, wx.ALL|wx.EXPAND, 8)
        row_sizer1.Add(self.project_name_label, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
        row_sizer1.Add(self.project_name, 1, wx.EXPAND, 0)
        properties_rows.Add(row_sizer1, 1, wx.EXPAND, 0)
        row_sizer2.Add(self.project_version_label, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
        row_sizer2.Add(self.project_version, 1, wx.EXPAND, 0)
        properties_rows.Add(row_sizer2, 1, wx.EXPAND, 0)
        row_sizer3.Add(self.project_company_label, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
        row_sizer3.Add(self.project_company, 1, wx.EXPAND, 0)
        properties_rows.Add(row_sizer3, 1, wx.EXPAND, 0)
        row_sizer4.Add(self.project_description_label, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
        row_sizer4.Add(self.project_description, 1, wx.EXPAND, 0)
        properties_rows.Add(row_sizer4, 1, wx.EXPAND, 0)
        row_sizer5.Add(self.project_author_label, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
        row_sizer5.Add(self.project_author, 1, wx.EXPAND, 0)
        properties_rows.Add(row_sizer5, 1, wx.EXPAND, 0)
        properties_rows.Add(self.static_line_2, 0, wx.ALL|wx.EXPAND, 2)
        row_sizer6.Add(self.project_image_label, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
        row_sizer6.Add(self.select_project_image, 0, 0, 0)
        properties_rows.Add(row_sizer6, 1, wx.EXPAND, 3)
        properties_rows_holder.Add(properties_rows, 0, wx.EXPAND, 0)
        sizer_1.Add(self.icon_bitmap, 0, wx.TOP, 3)
        properties_rows_holder.Add(sizer_1, 1, wx.LEFT|wx.EXPAND, 80)
        fields_sizer.Add(properties_rows_holder, 0, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(fields_sizer)
        items_sizer.Add(self.contents_tree, 0, wx.EXPAND, 0)
        items_sizer.Add(self.item_property_panel, 1, wx.EXPAND, 0)
        self.notebook_1_pane_2.SetSizer(items_sizer)
        self.tabs_notebook.AddPage(self.notebook_1_pane_1, "Project Settings")
        self.tabs_notebook.AddPage(self.notebook_1_pane_2, "AddIn Contents")
        splitter_sizer.Add(self.tabs_notebook, 1, wx.EXPAND, 4)
        content_sizer.Add(splitter_sizer, 1, wx.EXPAND, 4)
        main_sizer.Add(content_sizer, 1, wx.EXPAND, 0)
        self.SetSizer(main_sizer)
        self.Layout()
        # end wxGlade

    def SelectFolder(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `SelectFolder' not implemented!"
        event.Skip()

    def ComboBox(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `ComboBox' not implemented!"
        event.Skip()

    def ProjectNameText(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `ProjectNameText' not implemented!"
        event.Skip()

    def ProjectVersionText(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `ProjectVersionText' not implemented!"
        event.Skip()

    def ProjectCompanyText(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `ProjectCompanyText' not implemented!"
        event.Skip()

    def ProjectDescriptionText(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `ProjectDescriptionText' not implemented!"
        event.Skip()

    def ProjectAuthorText(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `ProjectAuthorText' not implemented!"
        event.Skip()

    def SelectProjectImage(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `SelectProjectImage' not implemented!"
        event.Skip()

    def BeginDrag(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `BeginDrag' not implemented!"
        event.Skip()

    def EndDrag(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `EndDrag' not implemented!"
        event.Skip()

    def DeleteItem(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `DeleteItem' not implemented!"
        event.Skip()

    def SelChanged(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `SelChanged' not implemented!"
        event.Skip()

    def ChangeTab(self, event): # wxGlade: AddinMakerWindow.<event_handler>
        print "Event handler `ChangeTab' not implemented!"
        event.Skip()

# end of class AddinMakerWindow


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    addin_window = AddinMakerWindow(None, -1, "")
    app.SetTopWindow(addin_window)
    addin_window.Show()
    app.MainLoop()
